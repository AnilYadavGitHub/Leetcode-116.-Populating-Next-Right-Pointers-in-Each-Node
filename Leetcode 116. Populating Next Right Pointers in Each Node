/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        
      if (!root) return NULL;

        Node* node = NULL;
        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            int s = q.size();
            node = NULL;

            for (int i = 0; i < s; i++) {
                Node* f1 = q.front();
                q.pop();

                if (f1->left) {
                    q.push(f1->left);
                }
                if (f1->right) {
                    q.push(f1->right);
                }

                if (node) {
                    node->next = f1;
                }
                node = f1;
            }
            node->next = NULL;
        }

        return root;
    }
};
